(cl:in-package #:claraoke-subtitle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Print subtitle (ASS)
;;;
(defmethod claraoke:print-subtitle
    ((subtitle claraoke:subtitle) &optional (stream *standard-output*))
  (princ "[Script Info]" stream)
  (terpri stream)
  (princ "; Script generated by Claraoke " stream)
  (princ (claraoke:version) stream)
  (terpri stream)
  (claraoke:print-subtitle (claraoke:script-info subtitle) stream)
  (terpri stream)
  (princ "[V4+ Styles]" stream)
  (terpri stream)
  (princ "Format: Name, " stream)
  (princ "Fontname, Fontsize, " stream)
  (princ "PrimaryColour, SecondaryColour, OutlineColour, BackColour, " stream)
  (princ "Bold, Italic, Underline, StrikeOut, " stream)
  (princ "ScaleX, ScaleY, " stream)
  (princ "Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, " stream)
  (princ "MarginL, MarginR, MarginV, " stream)
  (princ "Encoding" stream)
  (terpri stream)
  (claraoke:print-subtitle (claraoke:styles subtitle) stream)
  (terpri stream)
  (princ "[Events]" stream)
  (terpri stream)
  (princ "Format: Layer, " stream)
  (princ "Start, End, Style, Name, " stream)
  (princ "MarginL, MarginR, MarginV, " stream)
  (princ "Effect, Text" stream)
  (terpri stream)
  (claraoke:print-subtitle (reverse (claraoke:events subtitle)) stream)
  (terpri stream))

(defmethod claraoke:print-subtitle
    ((subtitle claraoke:script-info) &optional (stream *standard-output*))
  (let ((title (claraoke:title subtitle))
        (script-type (claraoke:script-type subtitle))
        (wrap-style (claraoke:wrap-style subtitle))
        (play-res-x (claraoke:play-res-x subtitle))
        (play-res-y (claraoke:play-res-y subtitle))
        (scaled-border-and-shadow (claraoke:scaled-border-and-shadow subtitle))
        (last-style-storage (claraoke:last-style-storage subtitle))
        (video-aspect-ratio (claraoke:video-aspect-ratio subtitle))
        (video-zoom (claraoke:video-zoom subtitle))
        (video-position (claraoke:video-position subtitle))
        (original-translation (claraoke:original-translation subtitle))
        (collisions (claraoke:collisions subtitle)))
    (unless (null title)
      (princ "Title: " stream)
      (princ title stream)
      (terpri stream))
    (unless (null script-type)
      (princ "ScriptType: " stream)
      (princ script-type stream)
      (terpri stream))
    (unless (null wrap-style)
      (princ "WrapStyle: " stream)
      (princ wrap-style stream)
      (terpri stream))
    (unless (null play-res-x)
      (princ "PlayResX: " stream)
      (princ play-res-x stream)
      (terpri stream))
    (unless (null play-res-y)
      (princ "PlayResY: " stream)
      (princ play-res-y stream)
      (terpri stream))
    (unless (null scaled-border-and-shadow)
      (princ "ScaledBorderAndShadow: " stream)
      (princ scaled-border-and-shadow stream)
      (terpri stream))
    (unless (null last-style-storage)
      (princ "LastStyleStorage: " stream)
      (princ last-style-storage stream)
      (terpri stream))
    (unless (null video-aspect-ratio)
      (princ "VideoAspectRatio: " stream)
      (princ video-aspect-ratio stream)
      (terpri stream))
    (unless (null video-zoom)
      (princ "VideoZoom: " stream)
      (princ video-zoom stream)
      (terpri stream))
    (unless (null video-position)
      (princ "VideoPosition: " stream)
      (princ video-position stream))
    (terpri stream)
    (unless (null original-translation)
      (princ "OriginalTranslation: " stream)
      (princ original-translation stream)
      (terpri stream))
    (unless (null collisions)
      (princ "Collisions: " stream)
      (princ collisions stream)
      (terpri stream))))

(defmethod claraoke:print-subtitle
    ((subtitle list) &optional (stream *standard-output*))
  (dolist (item subtitle)
    (claraoke:print-subtitle item stream)))

(defmethod claraoke:print-subtitle
    ((subtitle claraoke:style) &optional (stream *standard-output*))
  (let ((name (claraoke:name subtitle))
        (fontname (claraoke:fontname subtitle))
        (fontsize (claraoke:fontsize subtitle))
        (primary-colour (claraoke:primary-colour subtitle))
        (secondary-colour (claraoke:secondary-colour subtitle))
        (outline-colour (claraoke:outline-colour subtitle))
        (back-colour (claraoke:back-colour subtitle))
        (bold (claraoke:bold subtitle))
        (italic (claraoke:italic subtitle))
        (underline (claraoke:underline subtitle))
        (strike-out (claraoke:strike-out subtitle))
        (scale-x (claraoke:scale-x subtitle))
        (scale-y (claraoke:scale-y subtitle))
        (spacing (claraoke:spacing subtitle))
        (angle (claraoke:angle subtitle))
        (border-style (claraoke:border-style subtitle))
        (outline (claraoke:outline subtitle))
        (.shadow (claraoke:.shadow subtitle))
        (alignment (claraoke:alignment subtitle))
        (margin-l (claraoke:margin-l subtitle))
        (margin-r (claraoke:margin-r subtitle))
        (margin-v (claraoke:margin-v subtitle))
        (encoding (claraoke:encoding subtitle)))
    (princ "Style: " stream)
    (princ name stream)
    (princ #\, stream)
    (princ fontname stream)
    (princ #\, stream)
    (princ fontsize stream)
    (princ #\, stream)
    (princ primary-colour stream)
    (princ #\, stream)
    (princ secondary-colour stream)
    (princ #\, stream)
    (princ outline-colour stream)
    (princ #\, stream)
    (princ back-colour stream)
    (princ #\, stream)
    (princ bold stream)
    (princ #\, stream)
    (princ italic stream)
    (princ #\, stream)
    (princ underline stream)
    (princ #\, stream)
    (princ strike-out stream)
    (princ #\, stream)
    (princ scale-x stream)
    (princ #\, stream)
    (princ scale-y stream)
    (princ #\, stream)
    (princ spacing stream)
    (princ #\, stream)
    (princ angle stream)
    (princ #\, stream)
    (princ border-style stream)
    (princ #\, stream)
    (princ outline stream)
    (princ #\, stream)
    (princ .shadow stream)
    (princ #\, stream)
    (princ alignment stream)
    (princ #\, stream)
    (princ margin-l stream)
    (princ #\, stream)
    (princ margin-r stream)
    (princ #\, stream)
    (princ margin-v stream)
    (princ #\, stream)
    (princ encoding stream)
    (terpri stream)))

(defmethod claraoke:print-subtitle
    ((subtitle event) &optional (stream *standard-output*))
  (let ((layer (claraoke:layer subtitle))
        (start (claraoke:start subtitle))
        (end (claraoke:end subtitle))
        (style (claraoke:style subtitle))
        (name (claraoke:name subtitle))
        (margin-l (claraoke:margin-l subtitle))
        (margin-r (claraoke:margin-r subtitle))
        (margin-v (claraoke:margin-v subtitle))
        (effect (claraoke:effect subtitle))
        (text (claraoke:text subtitle)))
    (princ (string-capitalize (type-of subtitle)) stream)
    (princ ": " stream)
    (princ layer stream)
    (princ #\, stream)
    (princ start stream)
    (princ #\, stream)
    (princ end stream)
    (princ #\, stream)
    (princ style stream)
    (princ #\, stream)
    (princ name stream)
    (princ #\, stream)
    (princ margin-l stream)
    (princ #\, stream)
    (princ margin-r stream)
    (princ #\, stream)
    (princ margin-v stream)
    (princ #\, stream)
    (princ effect stream)
    (princ #\, stream)
    (princ text stream)
    (terpri stream)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Insert style
;;;
(defun same-style-p (style1 style2)
  (check-type style1 claraoke:style)
  (check-type style2 claraoke:style)
  (string-equal (claraoke:name style1) (claraoke:name style2)))

(defmethod claraoke:insert-style
    ((subtitle claraoke:subtitle) (style claraoke:style))
  (pushnew style (claraoke:styles subtitle) :test 'same-style-p))

(defmethod claraoke:insert-style (subtitle style)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:insert-style ((subtitle claraoke:subtitle) style)
  (error 'claraoke:object-must-be-style :object style))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Delete style
;;;
(defmethod claraoke:delete-style
    ((subtitle claraoke:subtitle) (style claraoke:style))
  (setf (claraoke:styles subtitle)
        (remove style (claraoke:styles subtitle))))

(defmethod claraoke:delete-style ((subtitle claraoke:subtitle) (style string))
  (claraoke:delete-style
   subtitle (or (claraoke:find-style subtitle style)
                (error 'claraoke:style-not-found :object style))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Find style
;;;
(defmethod claraoke:find-style
    ((subtitle claraoke:subtitle) (style claraoke:style))
  (find style (claraoke:styles subtitle)))

(defmethod claraoke:find-style ((subtitle claraoke:subtitle) (style string))
  (find style (claraoke:styles subtitle)
        :key 'claraoke:name
        :test 'string-equal))

(defmethod claraoke:find-style (subtitle style)
  nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Insert event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:insert-event ((subtitle claraoke:subtitle) (event event))
  (pushnew event (claraoke:events subtitle)))

(defmethod claraoke:insert-event (subtitle event)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:insert-event ((subtitle claraoke:subtitle) event)
  (error 'claraoke:object-must-be-event :object event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Delete event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:delete-event ((subtitle claraoke:subtitle) (event event))
  (setf (claraoke:events subtitle)
        (remove event (claraoke:events subtitle))))

(defmethod claraoke:delete-event (subtitle event)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:delete-event ((subtitle claraoke:subtitle) event)
  (error 'claraoke:object-must-be-event :object event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Find event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:find-event ((subtitle claraoke:subtitle) (position integer))
  (let ((events (claraoke:events subtitle)))
    (nth position (reverse events))))

(defmethod claraoke:find-event (subtitle position)
  (error 'claraoke:object-must-be-subtitle :object position))

(defmethod claraoke:find-event ((subtitle claraoke:subtitle) integer)
  (error 'claraoke:object-must-be-integer :object position))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Last event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:last-event ((subtitle claraoke:subtitle))
  (first (claraoke:events subtitle)))

(defmethod claraoke:last-event (subtitle)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Sort event (Dialogue, Comment, etc)
;;;
(defun sort-event-predicate (event1 event2)
  (check-type event1 event)
  (check-type event2 event)
  (claraoke:duration-greaterp
   (claraoke:start event1)
   (claraoke:start event2)))

(defmethod claraoke:sort-event ((subtitle claraoke:subtitle))
  (let ((events (claraoke:events subtitle)))
    (unless (null events)
      (setf (claraoke:events subtitle)
            (sort events 'sort-event-predicate)))))

(defmethod claraoke:sort-event (subtitle)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Duration start and end accessors
;;;
(defmethod (setf claraoke:start) :around (new-value (event event))
  (let ((duration1 (claraoke:duration new-value))
        (duration2 (claraoke:end event)))
    (when (claraoke:duration-greaterp duration1 duration2)
      (setf (claraoke:end event) duration1))
    (call-next-method duration1 event)))

(defmethod (setf claraoke:end) :around (new-value (event event))
  (call-next-method (claraoke:duration new-value) event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Print object (Event)
;;;
(defmethod print-object ((event event) stream)
  (let ((start (claraoke:start event))
        (end (claraoke:end event))
        (text (claraoke:text event)))
    (format stream "~A --> ~A ~S" start end text)))

