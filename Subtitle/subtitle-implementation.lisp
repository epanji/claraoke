(cl:in-package #:claraoke-subtitle)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Print script (ASS)
;;;
(defmethod claraoke:print-script ((object subtitle) &optional stream)
  (let ((stream (claraoke-internal:output-stream-from-designator stream)))
    (princ "[Script Info]" stream)
    (terpri stream)
    (princ "; Script generated by Claraoke " stream)
    (princ (claraoke:version) stream)
    (terpri stream)
    (claraoke:print-script (claraoke:script-info object) stream)
    (terpri stream)
    (princ "[V4+ Styles]" stream)
    (terpri stream)
    (princ "Format: Name, " stream)
    (princ "Fontname, Fontsize, " stream)
    (princ "PrimaryColour, SecondaryColour, OutlineColour, BackColour, " stream)
    (princ "Bold, Italic, Underline, StrikeOut, " stream)
    (princ "ScaleX, ScaleY, " stream)
    (princ "Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, " stream)
    (princ "MarginL, MarginR, MarginV, " stream)
    (princ "Encoding" stream)
    (terpri stream)
    (claraoke:print-script (claraoke:styles object) stream)
    (terpri stream)
    (princ "[Events]" stream)
    (terpri stream)
    (princ "Format: Layer, " stream)
    (princ "Start, End, Style, Name, " stream)
    (princ "MarginL, MarginR, MarginV, " stream)
    (princ "Effect, Text" stream)
    (terpri stream)
    (claraoke:print-script (reverse (claraoke:events object)) stream)
    (terpri stream)
    object))

(defmethod claraoke:print-script ((object claraoke:script-info) &optional stream)
  (let ((title (claraoke:title object))
        (script-type (claraoke:script-type object))
        (wrap-style (claraoke:wrap-style object))
        (play-res-x (claraoke:play-res-x object))
        (play-res-y (claraoke:play-res-y object))
        (scaled-border-and-shadow (claraoke:scaled-border-and-shadow object))
        (last-style-storage (claraoke:last-style-storage object))
        (video-aspect-ratio (claraoke:video-aspect-ratio object))
        (video-zoom (claraoke:video-zoom object))
        (video-position (claraoke:video-position object))
        (original-translation (claraoke:original-translation object))
        (collisions (claraoke:collisions object))
        (stream (claraoke-internal:output-stream-from-designator stream)))
    (unless (null title)
      (princ "Title: " stream)
      (princ title stream)
      (terpri stream))
    (unless (null script-type)
      (princ "ScriptType: " stream)
      (princ script-type stream)
      (terpri stream))
    (unless (null wrap-style)
      (princ "WrapStyle: " stream)
      (princ wrap-style stream)
      (terpri stream))
    (unless (null play-res-x)
      (princ "PlayResX: " stream)
      (princ play-res-x stream)
      (terpri stream))
    (unless (null play-res-y)
      (princ "PlayResY: " stream)
      (princ play-res-y stream)
      (terpri stream))
    (unless (null scaled-border-and-shadow)
      (princ "ScaledBorderAndShadow: " stream)
      (princ scaled-border-and-shadow stream)
      (terpri stream))
    (unless (null last-style-storage)
      (princ "LastStyleStorage: " stream)
      (princ last-style-storage stream)
      (terpri stream))
    (unless (null video-aspect-ratio)
      (princ "VideoAspectRatio: " stream)
      (princ video-aspect-ratio stream)
      (terpri stream))
    (unless (null video-zoom)
      (princ "VideoZoom: " stream)
      (princ video-zoom stream)
      (terpri stream))
    (unless (null video-position)
      (princ "VideoPosition: " stream)
      (princ video-position stream)
      (terpri stream))
    (unless (null original-translation)
      (princ "OriginalTranslation: " stream)
      (princ original-translation stream)
      (terpri stream))
    (unless (null collisions)
      (princ "Collisions: " stream)
      (princ collisions stream)
      (terpri stream))
    object))

(defmethod claraoke:print-script ((object list) &optional stream)
  (dolist (item object)
    (claraoke:print-script item stream))
  object)

(defmethod claraoke:print-script ((object claraoke:style) &optional stream)
  (let ((name (claraoke:name object))
        (fontname (claraoke:fontname object))
        (fontsize (claraoke:fontsize object))
        (primary-colour (claraoke:primary-colour object))
        (secondary-colour (claraoke:secondary-colour object))
        (outline-colour (claraoke:outline-colour object))
        (back-colour (claraoke:back-colour object))
        (bold (claraoke:bold object))
        (italic (claraoke:italic object))
        (underline (claraoke:underline object))
        (strike-out (claraoke:strike-out object))
        (scale-x (claraoke:scale-x object))
        (scale-y (claraoke:scale-y object))
        (spacing (claraoke:spacing object))
        (angle (claraoke:angle object))
        (border-style (claraoke:border-style object))
        (outline (claraoke:outline object))
        (.shadow (claraoke:.shadow object))
        (alignment (claraoke:alignment object))
        (margin-l (claraoke:margin-l object))
        (margin-r (claraoke:margin-r object))
        (margin-v (claraoke:margin-v object))
        (encoding (claraoke:encoding object))
        (stream (claraoke-internal:output-stream-from-designator stream)))
    (princ "Style: " stream)
    (princ name stream)
    (princ #\, stream)
    (princ fontname stream)
    (princ #\, stream)
    (princ fontsize stream)
    (princ #\, stream)
    (princ primary-colour stream)
    (princ #\, stream)
    (princ secondary-colour stream)
    (princ #\, stream)
    (princ outline-colour stream)
    (princ #\, stream)
    (princ back-colour stream)
    (princ #\, stream)
    (princ bold stream)
    (princ #\, stream)
    (princ italic stream)
    (princ #\, stream)
    (princ underline stream)
    (princ #\, stream)
    (princ strike-out stream)
    (princ #\, stream)
    (princ scale-x stream)
    (princ #\, stream)
    (princ scale-y stream)
    (princ #\, stream)
    (princ spacing stream)
    (princ #\, stream)
    (princ angle stream)
    (princ #\, stream)
    (princ border-style stream)
    (princ #\, stream)
    (princ outline stream)
    (princ #\, stream)
    (princ .shadow stream)
    (princ #\, stream)
    (princ alignment stream)
    (princ #\, stream)
    (princ margin-l stream)
    (princ #\, stream)
    (princ margin-r stream)
    (princ #\, stream)
    (princ margin-v stream)
    (princ #\, stream)
    (princ encoding stream)
    (terpri stream)
    object))

(defmethod claraoke:print-script ((object event) &optional stream)
  (let ((layer (claraoke:layer object))
        (start (claraoke:start object))
        (end (claraoke:end object))
        (.style (claraoke:.style object))
        (name (claraoke:name object))
        (margin-l (claraoke:margin-l object))
        (margin-r (claraoke:margin-r object))
        (margin-v (claraoke:margin-v object))
        (effect (claraoke:effect object))
        (text (claraoke:text object))
        (stream (claraoke-internal:output-stream-from-designator stream)))
    (princ (string-capitalize (type-of object)) stream)
    (princ ": " stream)
    (princ layer stream)
    (princ #\, stream)
    (princ start stream)
    (princ #\, stream)
    (princ end stream)
    (princ #\, stream)
    (princ .style stream)
    (princ #\, stream)
    (princ name stream)
    (princ #\, stream)
    (princ margin-l stream)
    (princ #\, stream)
    (princ margin-r stream)
    (princ #\, stream)
    (princ margin-v stream)
    (princ #\, stream)
    (princ effect stream)
    (princ #\, stream)
    (claraoke:print-text text stream)
    (terpri stream)
    object))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Subtitle
;;;
(defmethod claraoke:subtitle ((title string) &rest initargs &key &allow-other-keys)
  (let ((args (append (list :title title) initargs)))
    (apply 'make-instance 'subtitle args)))

(defmethod claraoke:subtitle ((object subtitle) &key)
  object)

(defmethod claraoke:subtitle ((object null) &key)
  nil)

(defmethod claraoke:subtitle (object &key)
  (error 'claraoke:failed-to-create-subtitle :input object))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Style
;;;
(defmethod claraoke:style ((name string) &rest initargs &key &allow-other-keys)
  (let ((args (append (list :name name) initargs)))
    (apply 'make-instance 'claraoke:style args)))

(defmethod claraoke:style ((object claraoke:style) &key)
  object)

(defmethod claraoke:style ((object null) &key)
  nil)

(defmethod claraoke:style (object &key)
  (error 'claraoke:failed-to-create-style :input object))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Insert style
;;;
(defun same-style-p (style1 style2)
  (check-type style1 claraoke:style)
  (check-type style2 claraoke:style)
  (string-equal (claraoke:name style1) (claraoke:name style2)))

(defmethod claraoke:insert-style
    ((subtitle subtitle) (style claraoke:style))
  (pushnew style (claraoke:styles subtitle) :test 'same-style-p))

(defmethod claraoke:insert-style (subtitle style)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:insert-style ((subtitle subtitle) style)
  (error 'claraoke:object-must-be-style :object style))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Delete style
;;;
(defmethod claraoke:delete-style
    ((subtitle subtitle) (style claraoke:style))
  (setf (claraoke:styles subtitle)
        (remove style (claraoke:styles subtitle))))

(defmethod claraoke:delete-style ((subtitle subtitle) (style string))
  (claraoke:delete-style
   subtitle (or (claraoke:find-style subtitle style)
                (error 'claraoke:style-not-found :item style))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Find style
;;;
(defmethod claraoke:find-style
    ((subtitle subtitle) (style claraoke:style))
  (find style (claraoke:styles subtitle)))

(defmethod claraoke:find-style ((subtitle subtitle) (style string))
  (find style (claraoke:styles subtitle)
        :key 'claraoke:name
        :test 'string-equal))

(defmethod claraoke:find-style (subtitle style)
  nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Insert event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:insert-event ((subtitle subtitle) (event event))
  (pushnew event (claraoke:events subtitle)))

(defmethod claraoke:insert-event (subtitle event)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:insert-event ((subtitle subtitle) event)
  (error 'claraoke:object-must-be-event :object event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Delete event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:delete-event ((subtitle subtitle) (event event))
  (setf (claraoke:events subtitle)
        (remove event (claraoke:events subtitle))))

(defmethod claraoke:delete-event (subtitle event)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

(defmethod claraoke:delete-event ((subtitle subtitle) event)
  (error 'claraoke:object-must-be-event :object event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Find event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:find-event ((subtitle subtitle) (position integer))
  (let ((events (claraoke:events subtitle)))
    (nth position (reverse events))))

(defmethod claraoke:find-event (subtitle position)
  (error 'claraoke:object-must-be-subtitle :object position))

(defmethod claraoke:find-event ((subtitle subtitle) integer)
  (error 'claraoke:object-must-be-integer :object position))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Last event (Dialogue, Comment, etc)
;;;
(defmethod claraoke:last-event ((subtitle subtitle))
  (first (claraoke:events subtitle)))

(defmethod claraoke:last-event (subtitle)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Sort event (Dialogue, Comment, etc)
;;;
(defun sort-event-predicate (event1 event2)
  (check-type event1 event)
  (check-type event2 event)
  (claraoke:duration-greaterp
   (claraoke:start event1)
   (claraoke:start event2)))

(defmethod claraoke:sort-event ((subtitle subtitle))
  (let ((events (claraoke:events subtitle)))
    (unless (null events)
      (setf (claraoke:events subtitle)
            (sort events 'sort-event-predicate)))))

(defmethod claraoke:sort-event (subtitle)
  (error 'claraoke:object-must-be-subtitle :object subtitle))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Duration start and end accessors
;;;
(defmethod (setf claraoke:start) :around (new-value (event event))
  (let ((duration1 (claraoke:duration new-value))
        (duration2 (claraoke:end event)))
    (when (claraoke:duration-greaterp duration1 duration2)
      (setf (claraoke:end event) duration1))
    (call-next-method duration1 event)))

(defmethod (setf claraoke:end) :around (new-value (event event))
  (call-next-method (claraoke:duration new-value) event))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Event kinds (Dialogue, Comment, picture, etc)
;;;
(macrolet ((define-method-instance (name)
             `(defmethod ,name (&rest args)
                (apply 'make-instance ',name args))))
  (define-method-instance claraoke:dialogue)
  (define-method-instance claraoke:comment)
  (define-method-instance claraoke:picture)
  (define-method-instance claraoke:sound)
  (define-method-instance claraoke:movie)
  (define-method-instance claraoke:command))

