(cl:in-package #:claraoke-test)

(in-suite subtitle-suite)

(defparameter *subtitle-string* (format nil "~
[Script Info]
; Script generated by ~A ( https://github.com/epanji/claraoke )
Title: Test
ScriptType: v4.00+
Collisions: Normal
PlayResX: 1280
PlayResY: 720
PlayDepth: 0
Timer: 100.0000
WrapStyle: 0

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,32,&H0000A5FF,&H00FFFFFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,25,25,72,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,This is first dialogue~2%"
                                  (claraoke-internal:version)))

(test working-with-subtitle
  (let ((sub (subtitle "Test"))
        (stream (make-string-output-stream)))
    (is (string-equal *subtitle-string* (ps-string sub)))
    (is (string-equal *subtitle-string* (ps-string (parse-script *subtitle-string*))))
    (is (eql 'claraoke-subtitle:subtitle (type-of sub)))
    (is (eql 'claraoke-subtitle:subtitle (type-of (print-script sub stream))))
    (is (eql 'claraoke-subtitle:subtitle (type-of (parse-script *subtitle-string*)))))
  (let ((sub (subtitle "" :title "Conf Script Info" :collisions "Reverse")))
    (is (string= "Conf Script Info" (value (find-info sub "Title"))))
    (is (string= "Reverse" (value (find-info sub "Collisions")))))
  (let ((sub (subtitle "Conf Default Style" :fontname "DejaVu San" :style-margin-v 25)))
    (is (string= "DejaVu San" (fontname (find-style sub "Default"))))
    (is (= 25 (margin-v (find-style sub "Default")))))
  (let ((sub1 (subtitle "Conf First Dialogue" :text "Hello world!"))
        (sub2 (subtitle "Conf First Dialogue" :text nil))
        (sub3 (subtitle nil)))
    (is (string= "Hello world!" (ps-string (text (last-event sub1)))))
    (is (null (lines (events sub2))))
    (is (null (lines (events sub3))))
    (is (null (lines (styles sub3))))))

(test working-with-script-info-section
  (let* ((sub (subtitle "Script Info" :play-res-x 640 :play-res-y 320 ))
         (cnt (length (lines (script-info sub)))))
    (is (= 640 (value (find-info sub "PlayResX"))))
    (is (= 320 (value (find-info sub "PlayResY"))))
    (is (= 200 (setf (value (find-info sub "PlayResX")) 200)))
    (is (= 100 (setf (value (find-info sub "PlayResY")) 100)))
    (insert-info sub (info "Unknown" :value "Ignored"))
    (is (= (1+ cnt) (length (lines (script-info sub)))))
    (is (string= "Ignored" (value (find-info sub "Unknown"))))
    (delete-info sub (find-info sub "Unknown"))
    (is (= cnt (length (lines (script-info sub)))))))

(test working-with-styles-section
  (let ((sub (subtitle "Styles" :alignment 2)))
    (is (= 1 (length (lines (styles sub)))))
    (insert-style sub (style "Top Centered" :alignment 8))
    (is (= 2 (length (lines (styles sub)))))
    (delete-style sub (find-style sub "Top Centered"))
    (is (= 1 (length (lines (styles sub)))))))

(test working-with-events-section
  (let ((sub (subtitle "Dialogue" :text nil)))
    (is (= 10 (setf (interval sub) 10)))
    (is (= 8 (setf (interval-frequency sub) 8)))
    (is (= 80 (setf (interval-counter sub) 80)))
    (insert-event sub (dialogue "Hello world!"))
    (is (= 90 (durationinteger (start (last-event sub)))))
    (is (= 170 (durationinteger (end (last-event sub)))))
    (insert-event sub (dialogue "Hello world!") :interval-delay 0 :interval-event 9)
    (is (= 170 (durationinteger (start (last-event sub)))))
    (is (= 260 (durationinteger (end (last-event sub)))))))

(test creating-dialogue-with-various-keyargs
  (let ((dlg1 (ps-string (dialogue "Hello world!")))
        (dlg2 (ps-string (dialogue "Hello world!" :generate-overrides-p t)))
        (dlg3 (ps-string (dialogue "Hello world!" :generate-overrides-p t :spell-duration 50)))
        (dlg4 (ps-string (dialogue "Hello world!" :generate-overrides-p t :spell-duration 50 :change-karaoke-type :fill)))
        (dlg5 (ps-string (dialogue "Hello world!" :generate-overrides-p t :spell-duration 50 :change-karaoke-type :outline)))
        (dlg6 (ps-string (dialogue "{\\None\\K25}Hel{\\K50}lo {\\K100}world!")))
        (dlg7 (ps-string (dialogue "{\\None\\K25}Hel{\\K50}lo {\\K100}world!" :remove-unknown-modifier-p t)))
        (dlg8 (ps-string (dialogue "{\\None\\K25}Hel{\\K50}lo {\\K100}world!" :remove-unknown-modifier-p t :keep-original-modifier-p t))))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,Hello world!~%") dlg1))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\k15}Hel{\\k15}lo {\\k15}world!~%") dlg2))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\k50}Hel{\\k50}lo {\\k50}world!~%") dlg3))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\kf50}Hel{\\kf50}lo {\\kf50}world!~%") dlg4))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\ko50}Hel{\\ko50}lo {\\ko50}world!~%") dlg5))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\None\\kf25}Hel{\\kf50}lo {\\kf100}world!~%") dlg6))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\kf25}Hel{\\kf50}lo {\\kf100}world!~%") dlg7))
    (is (string= (format nil "Dialogue: 0,0:00:00.00,0:00:03.00,Default,,0,0,0,,{\\K25}Hel{\\K50}lo {\\K100}world!~%") dlg8)))
  (let ((dlg1 (dialogue "Hello world!" :start 100 :end 400))
        (dlg2 (dialogue "Hello world!" :start 100 :duration 300))
        (dlg3 (dialogue "Hello world!" :end 300))
        (dlg4 (dialogue "Hello world!" :duration 300))
        (dlg5 (dialogue "Hello world!")))
    (= (durationinteger (end dlg1)) (durationinteger (end dlg2)))
    (= (durationinteger (duration-length dlg1)) (durationinteger (duration-length dlg2)))
    (= (durationinteger (duration-length dlg1)) (durationinteger (duration-length dlg3)))
    (= (durationinteger (duration-length dlg1)) (durationinteger (duration-length dlg4)))
    (= (durationinteger (duration-length dlg2)) (durationinteger (duration-length dlg3)))
    (= (durationinteger (duration-length dlg2)) (durationinteger (duration-length dlg4)))
    (= (durationinteger (duration-length dlg3)) (durationinteger (duration-length dlg4)))
    (setf (start dlg5) 900)
    ;; Ensure time end always greater than time start after updating
    (is (duration-greaterp (end dlg5) (start dlg5)))
    (setf (duration-length dlg5) 300)
    (is (string= (format nil "Dialogue: 0,0:00:09.00,0:00:12.00,Default,,0,0,0,,Hello world!~%") (ps-string dlg5)))))

(test working-with-fonts-section
  (let ((sub (subtitle "Fonts" :font-filename "myfont_B0.ttf")))
    ;; No embedding here, only add filename for editing later
    (is (string= (format nil "[Fonts]~%fontname: myfont_B0.ttf~2%") (ps-string (fonts sub))))))

(test working-with-graphics-section
  (let ((sub (subtitle "Graphics" :graphic-filename "mypic.jpg")))
    (is (string= (format nil "[Graphics]~%filename: mypic.jpg~2%") (ps-string (graphics sub))))))

(test checking-number-string-predicate
  ;; Number
  (is-true (claraoke-internal:number-string-p "1"))
  (is-true (claraoke-internal:number-string-p "1.0f0"))
  (is-true (claraoke-internal:number-string-p "1.0d0"))
  (is-true (claraoke-internal:number-string-p "1.0e2"))
  (is-true (claraoke-internal:number-string-p "1.0e-2"))
  (is-true (claraoke-internal:number-string-p "1/2"))
  (is-true (claraoke-internal:number-string-p " 12 "))
  (is-true (claraoke-internal:number-string-p "  12  "))
  (is-true (claraoke-internal:number-string-p "#c(1 2)"))
  ;; String
  (is-false (claraoke-internal:number-string-p "1 2"))
  (is-false (claraoke-internal:number-string-p "1;2"))
  (is-false (claraoke-internal:number-string-p "1'2"))
  (is-false (claraoke-internal:number-string-p "1,2"))
  (is-false (claraoke-internal:number-string-p " 1 2 "))
  (is-false (claraoke-internal:number-string-p "1:")))

